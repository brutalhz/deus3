---
# tasks file for monitoring
- name: Create config dir
  file:
    path: "{{ userdir }}/{{ config_dir }}"
    state: directory

- name: Create prometheus data dir
  file:
    path: "{{ userdir }}/{{ config_dir }}/prometheus_data"
    state: directory
  when: inventory_hostname in groups['monitoring']

- name: Config loki
  template:
    src: loki-config.yaml.j2
    dest: "{{ userdir }}/{{ config_dir }}/loki-config.yaml"
  when: inventory_hostname in groups['monitoring']

- name: Config prometheus
  template:
    src: prometheus.yml.j2
    dest: "{{ userdir }}/{{ config_dir }}/prometheus.yml"
  when: inventory_hostname in groups['monitoring']

- name: Config promtail
  template:
    src: promtail.yml.j2
    dest: "{{ userdir }}/{{ config_dir }}/promtail.yml"

- name: Config daemon.json for monitoring
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
  when: inventory_hostname in groups['monitoring']

- name: Config daemon.json for app
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
  when: inventory_hostname in groups['app']

- name: Create network
  docker_network:
    name: loki
  
- name: Install loki container
  docker_container:
    name: "loki"
    recreate: true
    restart_policy: unless-stopped
    image: "grafana/loki"
    volumes:
      - "{{ userdir }}/{{ config_dir }}/loki-config.yaml:/etc/loki/loki-config.yaml"
    networks:
      - name: "loki"
    ports:
      - "3100:3100"
    log_driver: loki
    log_opt:
      loki-url: "{{ hostvars[inventory_hostname]['groups']['monitoring'][0] }}"
      max-size: "50m"
      max-file: "10"
  when: inventory_hostname in groups['monitoring']

- name: redis
  docker_container:
    name: "redis"
    recreate: true
    restart_policy: unless-stopped
    image: "redis:latest"
    ports:
      - "6379:6379"

- name: Install cadvisor
  docker_container:
    name: "cadvisor"
    recreate: true
    restart_policy: unless-stopped
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"

- name: Install prometheus container
  docker_container:
    name: "prometheus"
    recreate: true
    restart_policy: unless-stopped
    image: prom/prometheus:latest
    volumes:
      - "{{ userdir }}/{{ config_dir }}/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
#      - "{{ userdir }}/{{ config_dir }}/prometheus_data:/prometheus"
    ports:
      - "9090:9090"
  when: inventory_hostname in groups['monitoring']

- name: Install Grafana
  docker_container:
    name: "grafana"
    recreate: true
    restart_policy: unless-stopped
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    env:
      GF_AUTH_DISABLE_LOGIN_FORM=true
      GF_AUTH_ANONYMOUS_ENABLED=true
      GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      GF_SECURITY_ALLOW_EMBEDDING=true
    log_driver: loki
    log_opt:
      loki-url: "{{ hostvars[inventory_hostname]['groups']['monitoring'][0] }}"
      max-size: "50m"
      max-file: "10"
  when: inventory_hostname in groups['monitoring']

- name: Install promtail
  docker_container:
    name: "promtail"
    recreate: true
    restart_policy: unless-stopped
    image: grafana/promtail:latest
    volumes:
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "{{ userdir }}/{{ config_dir }}/promtail.yml:/etc/promtail/promtail.yml"
      - "/var/log:/var/log/host"
    log_driver: loki
    log_opt:
      loki-url: "{{ hostvars[inventory_hostname]['groups']['monitoring'][0] }}"
      max-size: "50m"
      max-file: "10"

- name: Install node-exporter
  docker_container:
    name: "node_exporter"
    recreate: true
    restart_policy: unless-stopped
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  when: inventory_hostname in groups['app']
